# SuperLanding Cursor Rules

## 1. Общие правила
- Start message "Hey Bro"
- Всегда используй правила из этого файла и `docs/` при старте диалога.
- Все комментарии, код и документация — **только на английском** (если не указано иное).
- Для терминальных команд, требующих интерактива или постраничного вывода (git log, less, head), всегда добавляй `| cat` или `--yes`.

## 2. Документация — Единый Источник Правды
- **Обязательно сверяйся с документацией ПЕРЕД началом работы:**
  2. `docs/tasks/README.md` — Описание канбан-системы и процесса работы с задачами.
  3. `docs/tasks/backlog/` — Задачи, ожидающие выполнения.
  4. `docs/tasks/in-progress/` — Задачи в процессе выполнения.
  5. `docs/tasks/done/` — Завершенные задачи.
  6. `docs/project_status.md` — Общее состояние проекта.
  7. `docs/tasks/bugs.md` — Известные проблемы.
  8. `docs/component_guide.md` — Как создавать компоненты.
  9. `docs/marketing.md` — Маркетинговые требования.
  10. `docs/frontend-tech.md` — Технические требования и стек.

## 3. Управление Проектом и Задачами (Вайб-разработка)

### 3.1. Жизненный цикл задачи (Канбан)
1.  **Новая задача:**
    - Создай файл в `docs/tasks/backlog/` (например, `new-feature.md`).
    - Используй шаблон из `docs/tasks/README.md`.
    - Заполни все поля, **обязательно** добавь подробный **План реализации**.
2.  **Начало работы:**
    - Перемести файл задачи из `docs/tasks/backlog/` в `docs/tasks/in-progress/`.
    - Обнови **Статус** на `in-progress` и добавь **Дату начала** в файле задачи.
    - Убедись, что **План реализации** достаточно детальный, при необходимости дополни.
3.  **Завершение работы:**
    - Перемести файл задачи из `docs/tasks/in-progress/` в `docs/tasks/done/`.
    - Обнови **Статус** на `done` и добавь **Дату завершения** в файле задачи.
    - Обнови `docs/project_status.md`.
    - Если задача исправляла баг, обнови соответствующую запись в `docs/tasks/bugs.md`.
4.  **Обнаружен баг:**
    - Создай новую запись в `docs/tasks/bugs.md`.
    - При необходимости создай связанную задачу типа `bug` в `docs/tasks/backlog/`.

### 3.2. Обновление документации (ОБЯЗАТЕЛЬНО)
- **Ключевое правило:** Любое значимое действие **должно** быть отражено в документации **сразу**.
- **При изменении статуса задачи (п. 3.1):** Перемести файл задачи, обнови статус и даты в файле, обнови `docs/project_status.md` (при завершении).
- **При обнаружении/исправлении бага:** Обнови `docs/tasks/bugs.md`.
- **При завершении задачи/фичи:** Обнови `docs/project_status.md`.
- **При изменении требований:** Обнови `docs/marketing.md` или `docs/frontend-tech.md`, создай/обнови задачу в `docs/tasks/backlog/`.

## 4. Разработка и Качество
- **Руководство:** Всегда следуй гайду `docs/component_guide.md`.
- **Локализация:** Все тексты локализовать через `next-intl`.
- **Стили:** Использовать `Tailwind CSS`.
- **Качество кода:**
    - Перед коммитом или завершением задачи **всегда** запускай:
        - `bun lint`
        - `bun type-check`
    - Исправляй все ошибки перед продолжением.
- **Новые компоненты/фичи:** Убедись, что обновлена вся связанная документация (см. п. 3.2).

## 5. Работа с Git
- **Ветки:**
    1. Если находишься в `master` и начинаешь новую задачу/фичу/багфикс — создай новую ветку.
    2. Если уже находишься в feature-ветке — уточни, нужно ли создавать новую.
- **Pull Requests:** (Если применимо) Создавай PR для мерджа в `master`.

## 6. Ключевые Принципы
- Документация — **всегда** актуальна.
- Контекст не теряем — **всегда** сверяемся с `docs/` и канбан-доской (`docs/tasks/`).
- Все процессы и изменения **отражены** в документации.

# MCP servers
1. github
2. browser-tools - for browser debug (проверяй им всегда внешний вид или нетворк ошибки)
3. postgres - for postgres debug (проверяй им всегда базу данных)

## Github

1. Если пользователь запросит (мердж, пул реквест) или закончил работу над задачей, тогда:
2. Создай отдельную ветку в репозитории (если в master находишься), если уже находишься не в master то не создавай ветку или спроси

## Frontend
 1. Use "bun lint" after finish solve some task.

## 7. Полезные команды

```bash
# Запуск проекта
bun dev:web - локальный сервер

# Проверка линтером
bun lint

# Сборка проекта
bun run build

# Запуск тестов (когда будут добавлены)
bun test


"scripts": {
"build": "turbo build ",
"clean": "git clean -xdf node_modules",
"clean:workspaces": "turbo clean",
"db:push": "cd ./packages/db/ && bun db:push",
"dev": "turbo dev --parallel",
"dev:web": "turbo dev --parallel --filter !stripe",
"format": "turbo format --continue -- --cache --cache-location='node_modules/.cache/.prettiercache' --ignore-path='../../.gitignore'",
"format:fix": "turbo format --continue -- --write --cache --cache-location='node_modules/.cache/.prettiercache' --ignore-path='../../.gitignore'",
"lint": "turbo lint -- --quiet -- --cache --cache-location 'node_modules/.cache/.eslintcache' && manypkg check",
"lint:fix": "turbo lint --continue -- --fix --cache --cache-location 'node_modules/.cache/.eslintcache' ",
"typecheck": "turbo typecheck",
"postinstall": "bun run check-deps",
"check-deps": "check-dependency-version-consistency .",
"gen": "turbo gen --config 'turbo/generators/config.ts'"
}
```


## 3. Реальная структура проекта

Наш проект SuperDuperAI организован как монорепозиторий с использованием Turborepo. Ниже представлена актуальная структура проекта:

```
SuperDuperAI/                # Корневая директория проекта
├── .github/                 # GitHub Actions и конфигурации
│   └── workflows/           # CI/CD конфигурации
├── apps/                    # Приложения
│   ├── auth-proxy/          # Прокси для аутентификации
│   │   └── routes/          # Роуты для прокси
│   │
│   └── nextjs/              # Основное Next.js приложение
│       ├── public/          # Статические файлы
│       │   └── images/      # Изображения
│       │       ├── avatars/ # Аватары пользователей
│       │       └── blog/    # Изображения для блога
│       │
│       └── src/             # Исходный код
│           ├── app/         # App Router (Next.js 14+)
│           │   ├── [lang]/  # Локализованные роуты
│           │   │   ├── (auth)/       # Группа для аутентификации
│           │   │   │   ├── login/    # Страница входа
│           │   │   │   └── register/ # Страница регистрации
│           │   │   │
│           │   │   ├── (dashboard)/  # Группа для дашборда
│           │   │   │   └── dashboard/  # Дашборд пользователя
│           │   │   │       ├── billing/  # Управление подпиской
│           │   │   │       └── settings/ # Настройки пользователя
│           │   │   │
│           │   │   ├── (docs)/      # Группа для документации
│           │   │   │   └── docs/    # Документация
│           │   │   │
│           │   │   ├── (editor)/    # Группа для редактора
│           │   │   │   └── editor/  # Редактор видео
│           │   │   │       └── cluster/  # Управление кластерами
│           │   │   │
│           │   │   └── (marketing)/ # Группа для маркетинга
│           │   │       ├── blog/    # Блог
│           │   │       ├── pricing/ # Страница с ценами
│           │   │       └── page.tsx # Главная страница (лендинг)
│           │   │
│           │   ├── admin/           # Административная панель
│           │   │   ├── (dashboard)/ # Дашборд администратора
│           │   │   └── login/       # Вход для администратора
│           │   │
│           │   └── api/             # API роуты
│           │       ├── auth/        # Аутентификация
│           │       ├── trpc/        # tRPC эндпоинты
│           │       └── webhooks/    # Вебхуки (Stripe и др.)
│           │
│           ├── components/          # Компоненты React
│           │   ├── blog/            # Компоненты блога
│           │   ├── content/         # Компоненты для контента
│           │   ├── docs/            # Компоненты документации
│           │   ├── k8s/             # Компоненты для Kubernetes
│           │   ├── price/           # Компоненты для страницы цен
│           │   ├── feature-highlights.tsx # Карточки возможностей
│           │   ├── final-cta.tsx         # Призыв к действию
│           │   ├── how-it-works.tsx      # Как работает сервис
│           │   ├── testimonials.tsx      # Отзывы пользователей
│           │   ├── use-cases.tsx         # Сценарии использования
│           │   ├── video-scroll.tsx      # Скролл видео
│           │   └── [другие компоненты]   # UI компоненты
│           │
│           ├── config/              # Конфигурации
│           │   ├── dictionaries/    # Словари для локализации
│           │   ├── price/           # Конфигурация цен
│           │   └── ui/              # Конфигурация UI
│           │
│           ├── content/             # Контент (MDX)
│           │   ├── authors/         # Информация об авторах
│           │   ├── blog/            # Статьи блога
│           │   ├── docs/            # Документация
│           │   └── guides/          # Руководства
│           │
│           ├── hooks/               # React хуки
│           ├── lib/                 # Утилиты и библиотеки
│           │   └── validations/     # Валидации форм
│           │
│           ├── styles/              # Стили
│           │   ├── fonts/           # Шрифты
│           │   └── theme/           # Темы оформления
│           │
│           ├── trpc/                # tRPC конфигурация
│           ├── types/               # TypeScript типы
│           └── utils/               # Вспомогательные функции
│
├── docs/                    # Документация проекта
│   ├── tasks/               # Задачи канбан-системы
│   │   ├── backlog/         # Задачи в бэклоге
│   │   ├── in-progress/     # Задачи в работе
│   │   └── done/            # Выполненные задачи
│   │
│   ├── frontend-tech.md     # Документация по фронтенду
│   ├── marketing.md         # Маркетинговые требования
│   └── project_status.md    # Статус проекта
│
├── packages/                # Переиспользуемые пакеты
│   ├── api/                 # API-клиент
│   │   └── src/             # Исходный код API
│   │       └── router/      # tRPC роутеры
│   │
│   ├── auth/                # Аутентификация
│   ├── common/              # Общие утилиты
│   │   └── src/             
│   │       ├── config/      # Конфигурации
│   │       └── emails/      # Шаблоны email
│   │
│   ├── db/                  # База данных
│   │   └── prisma/          # Prisma схема
│   │
│   ├── stripe/              # Интеграция со Stripe
│   │   └── src/             # Исходный код для Stripe
│   │
│   └── ui/                  # UI компоненты (библиотека)
│       └── src/             # Исходный код компонентов
│           ├── data/        # Данные для компонентов
│           └── utils/       # Утилиты для компонентов
│
└── tooling/                 # Инструменты разработки
    ├── eslint-config/       # ESLint конфигурация
    ├── prettier-config/     # Prettier конфигурация
    ├── tailwind-config/     # Tailwind CSS конфигурация
    └── typescript-config/   # TypeScript конфигурация
```
